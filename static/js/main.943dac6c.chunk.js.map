{"version":3,"sources":["pages/Terminal/index.tsx","pages/Title/index.tsx","pages/Window/index.tsx","pages/Desktop/index.tsx","serviceWorker.ts","index.tsx"],"names":["Terminal","className","href","Title","Window","Desktop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUA8BeA,MA1Bf,WACI,OACI,oCACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,cACX,0BAAMA,UAAU,UAAhB,KACA,0BAAMA,UAAU,WAAhB,qBAEJ,6BACI,4BACI,4BACI,yCAAc,uBAAGC,KAAK,qCAAR,uCAElB,4BACI,wCAAa,uBAAGA,KAAK,qCAAR,gCAEjB,4BACI,2CAAgB,uBAAGA,KAAK,2DAAR,2B,MCS7BC,MA3Bf,WACI,OACI,oCACI,yBAAKF,UAAU,SACX,yBAAKA,UAAU,gBACX,4BAAQA,UAAU,gBACd,oCAGJ,4BAAQA,UAAU,mBACd,oCAGJ,4BAAQA,UAAU,mBACd,qCAGR,yBAAKA,UAAU,cACX,mDAGJ,yBAAKA,UAAU,aAAf,Q,MCPDG,MAXf,WACI,OACI,oCACI,yBAAKH,UAAU,UACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEDI,MARf,WACI,OACI,oCACI,kBAAC,EAAD,QCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.943dac6c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './styles.css';\n\nfunction Terminal() {\n    return (\n        <>\n            <div className=\"terminal\">\n                <div className=\"output-cat\">\n                    <span className=\"symbol\">$</span>\n                    <span className=\"command\">cat contacts.txt</span>\n                </div>\n                <div>\n                    <ul>\n                        <li>\n                            <span>Github: <a href=\"https://github.com/LeandrodaSilva\">https://github.com/LeandrodaSilva</a></span>\n                        </li>\n                        <li>\n                            <span>Email: <a href=\"mailto:ldsilva.dasilva7@gmail.com\">ldsilva.dasilva7@gmail.com</a></span>\n                        </li>\n                        <li>\n                            <span>Facebook: <a href=\"https://www.facebook.com/profile.php?id=100021675755483\">Leandro da Silva</a></span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Terminal;\n","import React from 'react';\nimport './styles.css';\n\nfunction Title() {\n    return (\n        <>\n            <div className=\"title\">\n                <div className=\"button-group\">\n                    <button className=\"button-close\">\n                        <span>x</span>\n                    </button>\n\n                    <button className=\"button-minimize\">\n                        <span>_</span>\n                    </button>\n\n                    <button className=\"button-maximize\">\n                        <span>+</span>\n                    </button>\n                </div>\n                <div className=\"title-text\">\n                    <span>Leandro da Silva</span>\n                </div>\n\n                <div className=\"title-end\"> </div>\n            </div>\n        </>\n    );\n}\n\nexport default Title;\n","import React from 'react';\nimport Terminal from '../Terminal';\n\nimport Title from \"../Title\";\nimport './styles.css';\n\nfunction Window() {\n    return (\n        <>\n            <div className=\"window\">\n                <Title/>\n                <Terminal/>\n            </div>\n        </>\n    );\n}\n\nexport default Window;\n","import React from 'react';\n\nimport './styles.css';\nimport Window from \"../Window\";\n\nfunction Desktop() {\n    return (\n        <>\n            <Window/>\n        </>\n    );\n}\n\nexport default Desktop;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Desktop from './pages/Desktop';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Desktop />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}